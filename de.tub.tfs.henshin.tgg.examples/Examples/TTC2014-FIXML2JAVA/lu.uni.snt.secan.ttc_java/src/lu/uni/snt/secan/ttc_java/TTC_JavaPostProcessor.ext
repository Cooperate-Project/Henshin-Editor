import ecore;

process(xtext::GeneratedMetamodel this) :
	process(ePackage)
;
 
process(ecore::EPackage this) :
	eClassifiers.add(newClass("AbstractTarget"))->
	eClassifiers.add(newClass("AbstractCorrT"))->
	eClassifiers.process()->
	this.getEClassifier("AbstractTarget").getEStructuralFeature("t2c").setEOpposite(this.getEClassifier("AbstractCorrT").getEStructuralFeature("tgt"))->
	this.getEClassifier("AbstractCorrT").getEStructuralFeature("tgt").setEOpposite(this.getEClassifier("AbstractTarget").getEStructuralFeature("t2c"))
;

process(ecore::EClass this):
	if (this.eSuperTypes.size == 0 && this.name != "AbstractTarget" && this.name != "AbstractCorrT") then (
		 this.eSuperTypes.add(this.ePackage.getEClassifier("AbstractTarget")))->
	if (this.name == "AbstractTarget")	then (
		injectStructuralFeature(this,createReference("t2c",this.ePackage.getEClassifier("AbstractCorrT"))).setUpperBound(-1))->
	if (this.name == "AbstractCorrT") then  (
		injectStructuralFeature(this,createReference("tgt",this.ePackage.getEClassifier("AbstractTarget"))))
;

/**
 * Add feature only if is not already existing.
 */
injectStructuralFeature(ecore::EClass this, ecore::EReference struct):
   if(this.getEStructuralFeature(struct.name)) == null
      then
   this.eStructuralFeatures.add(struct)->
   struct
;


createReference(String name, ecore::EClassifier type):
   let attr = new ecore::EReference :
      attr.setName(name)->
      attr.setEType(type)->
      attr.setUpperBound(1)->
      attr.setLowerBound(0)->
      attr.setTransient(false)->
      attr.setVolatile(false)->
      attr.setDerived(false)->
      attr.setResolveProxies(true)->
      attr.setUnsettable(false)->
      attr.setChangeable(true)->
      attr
;


create ecore::EClass newClass(String name):
	this.setName(name)
;

