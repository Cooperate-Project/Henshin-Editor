/*
* generated by Xtext
*/
grammar InternalTTC_Java;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package lu.uni.snt.secan.ttc_java.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package lu.uni.snt.secan.ttc_java.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import lu.uni.snt.secan.ttc_java.services.TTC_JavaGrammarAccess;

}

@parser::members {
 
 	private TTC_JavaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TTC_JavaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleimport_
entryRuleimport_ 
:
{ before(grammarAccess.getImport_Rule()); }
	 ruleimport_
{ after(grammarAccess.getImport_Rule()); } 
	 EOF 
;

// Rule import_
ruleimport_
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImport_Access().getGroup()); }
(rule__Import___Group__0)
{ after(grammarAccess.getImport_Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleclass_def
entryRuleclass_def 
:
{ before(grammarAccess.getClass_defRule()); }
	 ruleclass_def
{ after(grammarAccess.getClass_defRule()); } 
	 EOF 
;

// Rule class_def
ruleclass_def
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClass_defAccess().getGroup()); }
(rule__Class_def__Group__0)
{ after(grammarAccess.getClass_defAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefeature
entryRulefeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 rulefeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule feature
rulefeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
(rule__Feature__Alternatives)
{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestmt
entryRulestmt 
:
{ before(grammarAccess.getStmtRule()); }
	 rulestmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule stmt
rulestmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStmtAccess().getGroup()); }
(rule__Stmt__Group__0)
{ after(grammarAccess.getStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledeclaration
entryRuledeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruledeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule declaration
ruledeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletypeParameter
entryRuletypeParameter 
:
{ before(grammarAccess.getTypeParameterRule()); }
	 ruletypeParameter
{ after(grammarAccess.getTypeParameterRule()); } 
	 EOF 
;

// Rule typeParameter
ruletypeParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParameterAccess().getGroup()); }
(rule__TypeParameter__Group__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleassignment
entryRuleassignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleassignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule assignment
ruleassignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefully_qualified_name
entryRulefully_qualified_name 
:
{ before(grammarAccess.getFully_qualified_nameRule()); }
	 rulefully_qualified_name
{ after(grammarAccess.getFully_qualified_nameRule()); } 
	 EOF 
;

// Rule fully_qualified_name
rulefully_qualified_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFully_qualified_nameAccess().getGroup()); }
(rule__Fully_qualified_name__Group__0)
{ after(grammarAccess.getFully_qualified_nameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexp
entryRuleexp 
:
{ before(grammarAccess.getExpRule()); }
	 ruleexp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule exp
ruleexp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpAccess().getAlternatives()); }
(rule__Exp__Alternatives)
{ after(grammarAccess.getExpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstructor_call
entryRuleconstructor_call 
:
{ before(grammarAccess.getConstructor_callRule()); }
	 ruleconstructor_call
{ after(grammarAccess.getConstructor_callRule()); } 
	 EOF 
;

// Rule constructor_call
ruleconstructor_call
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructor_callAccess().getGroup()); }
(rule__Constructor_call__Group__0)
{ after(grammarAccess.getConstructor_callAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethodCall
entryRulemethodCall 
:
{ before(grammarAccess.getMethodCallRule()); }
	 rulemethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule methodCall
rulemethodCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodCallAccess().getGroup()); }
(rule__MethodCall__Group__0)
{ after(grammarAccess.getMethodCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemethod_def
entryRulemethod_def 
:
{ before(grammarAccess.getMethod_defRule()); }
	 rulemethod_def
{ after(grammarAccess.getMethod_defRule()); } 
	 EOF 
;

// Rule method_def
rulemethod_def
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethod_defAccess().getGroup()); }
(rule__Method_def__Group__0)
{ after(grammarAccess.getMethod_defAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulebody
entryRulebody 
:
{ before(grammarAccess.getBodyRule()); }
	 rulebody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule body
rulebody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getGroup()); }
(rule__Body__Group__0)
{ after(grammarAccess.getBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleargument
entryRuleargument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleargument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule argument
ruleargument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAccess().getGroup()); }
(rule__Argument__Group__0)
{ after(grammarAccess.getArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleatom
entryRuleatom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleatom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule atom
ruleatom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariable_name
entryRulevariable_name 
:
{ before(grammarAccess.getVariable_nameRule()); }
	 rulevariable_name
{ after(grammarAccess.getVariable_nameRule()); } 
	 EOF 
;

// Rule variable_name
rulevariable_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariable_nameAccess().getNameAssignment()); }
(rule__Variable_name__NameAssignment)
{ after(grammarAccess.getVariable_nameAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestring_val
entryRulestring_val 
:
{ before(grammarAccess.getString_valRule()); }
	 rulestring_val
{ after(grammarAccess.getString_valRule()); } 
	 EOF 
;

// Rule string_val
rulestring_val
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getString_valAccess().getValueAssignment()); }
(rule__String_val__ValueAssignment)
{ after(grammarAccess.getString_valAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleint_val
entryRuleint_val 
:
{ before(grammarAccess.getInt_valRule()); }
	 ruleint_val
{ after(grammarAccess.getInt_valRule()); } 
	 EOF 
;

// Rule int_val
ruleint_val
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInt_valAccess().getValueAssignment()); }
(rule__Int_val__ValueAssignment)
{ after(grammarAccess.getInt_valAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Feature__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getStmtParserRuleCall_0()); }
	rulestmt
{ after(grammarAccess.getFeatureAccess().getStmtParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureAccess().getMethod_defParserRuleCall_1()); }
	rulemethod_def
{ after(grammarAccess.getFeatureAccess().getMethod_defParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getDeclarationParserRuleCall_0_0()); }
	ruledeclaration
{ after(grammarAccess.getStmtAccess().getDeclarationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAssignmentParserRuleCall_0_1()); }
	ruleassignment
{ after(grammarAccess.getStmtAccess().getAssignmentParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpAccess().getAtomParserRuleCall_0()); }
	ruleatom
{ after(grammarAccess.getExpAccess().getAtomParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpAccess().getConstructor_callParserRuleCall_1()); }
	ruleconstructor_call
{ after(grammarAccess.getExpAccess().getConstructor_callParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpAccess().getMethodCallParserRuleCall_2()); }
	rulemethodCall
{ after(grammarAccess.getExpAccess().getMethodCallParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getString_valParserRuleCall_0()); }
	rulestring_val
{ after(grammarAccess.getAtomAccess().getString_valParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getInt_valParserRuleCall_1()); }
	ruleint_val
{ after(grammarAccess.getAtomAccess().getInt_valParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getVariable_nameParserRuleCall_2()); }
	rulevariable_name
{ after(grammarAccess.getAtomAccess().getVariable_nameParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
(rule__Model__ImportsAssignment_0)*
{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getClassesAssignment_1()); }
(rule__Model__ClassesAssignment_1)*
{ after(grammarAccess.getModelAccess().getClassesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import___Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import___Group__0__Impl
	rule__Import___Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import___Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_Access().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImport_Access().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import___Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import___Group__1__Impl
	rule__Import___Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import___Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_Access().getEntryAssignment_1()); }
(rule__Import___EntryAssignment_1)
{ after(grammarAccess.getImport_Access().getEntryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import___Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import___Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import___Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_Access().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getImport_Access().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Class_def__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class_def__Group__0__Impl
	rule__Class_def__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getClassKeyword_0()); }

	'class' 

{ after(grammarAccess.getClass_defAccess().getClassKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class_def__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class_def__Group__1__Impl
	rule__Class_def__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getNameAssignment_1()); }
(rule__Class_def__NameAssignment_1)
{ after(grammarAccess.getClass_defAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class_def__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class_def__Group__2__Impl
	rule__Class_def__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getClass_defAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class_def__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class_def__Group__3__Impl
	rule__Class_def__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getInitialDeclarationsAssignment_3()); }
(rule__Class_def__InitialDeclarationsAssignment_3)*
{ after(grammarAccess.getClass_defAccess().getInitialDeclarationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class_def__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class_def__Group__4__Impl
	rule__Class_def__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getFeatureAssignment_4()); }
(rule__Class_def__FeatureAssignment_4)*
{ after(grammarAccess.getClass_defAccess().getFeatureAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class_def__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class_def__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getClass_defAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__0__Impl
	rule__Stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getAlternatives_0()); }
(rule__Stmt__Alternatives_0)
{ after(grammarAccess.getStmtAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeParameterAssignment_1()); }
(rule__Declaration__TypeParameterAssignment_1)?
{ after(grammarAccess.getDeclarationAccess().getTypeParameterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
	rule__Declaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNameAssignment_2()); }
(rule__Declaration__NameAssignment_2)
{ after(grammarAccess.getDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__3__Impl
	rule__Declaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDefaultValueAssignment_4()); }
(rule__Declaration__DefaultValueAssignment_4)
{ after(grammarAccess.getDeclarationAccess().getDefaultValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TypeParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__0__Impl
	rule__TypeParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getTypeParameterAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__1__Impl
	rule__TypeParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypePAssignment_1()); }
(rule__TypeParameter__TypePAssignment_1)
{ after(grammarAccess.getTypeParameterAccess().getTypePAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getTypeParameterAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
(rule__Assignment__VarAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpAssignment_2()); }
(rule__Assignment__ExpAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fully_qualified_name__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fully_qualified_name__Group__0__Impl
	rule__Fully_qualified_name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fully_qualified_name__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFully_qualified_nameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFully_qualified_nameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fully_qualified_name__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fully_qualified_name__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fully_qualified_name__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFully_qualified_nameAccess().getGroup_1()); }
(rule__Fully_qualified_name__Group_1__0)*
{ after(grammarAccess.getFully_qualified_nameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fully_qualified_name__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fully_qualified_name__Group_1__0__Impl
	rule__Fully_qualified_name__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fully_qualified_name__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFully_qualified_nameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFully_qualified_nameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fully_qualified_name__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fully_qualified_name__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fully_qualified_name__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFully_qualified_nameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFully_qualified_nameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constructor_call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constructor_call__Group__0__Impl
	rule__Constructor_call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor_call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructor_callAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getConstructor_callAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constructor_call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constructor_call__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor_call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructor_callAccess().getMethodAssignment_1()); }
(rule__Constructor_call__MethodAssignment_1)
{ after(grammarAccess.getConstructor_callAccess().getMethodAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__0__Impl
	rule__MethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getNameAssignment_0()); }
(rule__MethodCall__NameAssignment_0)
{ after(grammarAccess.getMethodCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__1__Impl
	rule__MethodCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getTypePAssignment_1()); }
(rule__MethodCall__TypePAssignment_1)?
{ after(grammarAccess.getMethodCallAccess().getTypePAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__2__Impl
	rule__MethodCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Method_def__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__0__Impl
	rule__Method_def__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getNameAssignment_0()); }
(rule__Method_def__NameAssignment_0)
{ after(grammarAccess.getMethod_defAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__1__Impl
	rule__Method_def__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMethod_defAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__2__Impl
	rule__Method_def__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getGroup_2()); }
(rule__Method_def__Group_2__0)?
{ after(grammarAccess.getMethod_defAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__3__Impl
	rule__Method_def__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMethod_defAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__4__Impl
	rule__Method_def__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getMethod_defAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__5__Impl
	rule__Method_def__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getBodyAssignment_5()); }
(rule__Method_def__BodyAssignment_5)
{ after(grammarAccess.getMethod_defAccess().getBodyAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getMethod_defAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Method_def__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group_2__0__Impl
	rule__Method_def__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getArgsAssignment_2_0()); }
(rule__Method_def__ArgsAssignment_2_0)
{ after(grammarAccess.getMethod_defAccess().getArgsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getGroup_2_1()); }
(rule__Method_def__Group_2_1__0)*
{ after(grammarAccess.getMethod_defAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Method_def__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group_2_1__0__Impl
	rule__Method_def__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getMethod_defAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Method_def__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Method_def__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getArgsAssignment_2_1_1()); }
(rule__Method_def__ArgsAssignment_2_1_1)
{ after(grammarAccess.getMethod_defAccess().getArgsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Body__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBodyAction_0()); }
(

)
{ after(grammarAccess.getBodyAccess().getBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getStmtsAssignment_1()); }
(rule__Body__StmtsAssignment_1)*
{ after(grammarAccess.getBodyAccess().getStmtsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeAssignment_0()); }
(rule__Argument__TypeAssignment_0)
{ after(grammarAccess.getArgumentAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__1__Impl
	rule__Argument__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypePAssignment_1()); }
(rule__Argument__TypePAssignment_1)?
{ after(grammarAccess.getArgumentAccess().getTypePAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameAssignment_2()); }
(rule__Argument__NameAssignment_2)
{ after(grammarAccess.getArgumentAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getImportsImport_ParserRuleCall_0_0()); }
	ruleimport_{ after(grammarAccess.getModelAccess().getImportsImport_ParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ClassesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getClassesClass_defParserRuleCall_1_0()); }
	ruleclass_def{ after(grammarAccess.getModelAccess().getClassesClass_defParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import___EntryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_Access().getEntryFully_qualified_nameParserRuleCall_1_0()); }
	rulefully_qualified_name{ after(grammarAccess.getImport_Access().getEntryFully_qualified_nameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getClass_defAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__InitialDeclarationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getInitialDeclarationsStmtParserRuleCall_3_0()); }
	rulestmt{ after(grammarAccess.getClass_defAccess().getInitialDeclarationsStmtParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class_def__FeatureAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClass_defAccess().getFeatureFeatureParserRuleCall_4_0()); }
	rulefeature{ after(grammarAccess.getClass_defAccess().getFeatureFeatureParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getDeclarationAccess().getTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeParameterTypeParameterParserRuleCall_1_0()); }
	ruletypeParameter{ after(grammarAccess.getDeclarationAccess().getTypeParameterTypeParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DefaultValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDefaultValueExpParserRuleCall_4_0()); }
	ruleexp{ after(grammarAccess.getDeclarationAccess().getDefaultValueExpParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__TypePAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypePIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeParameterAccess().getTypePIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVarFully_qualified_nameParserRuleCall_0_0()); }
	rulefully_qualified_name{ after(grammarAccess.getAssignmentAccess().getVarFully_qualified_nameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpExpParserRuleCall_2_0()); }
	ruleexp{ after(grammarAccess.getAssignmentAccess().getExpExpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constructor_call__MethodAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructor_callAccess().getMethodMethodCallParserRuleCall_1_0()); }
	rulemethodCall{ after(grammarAccess.getConstructor_callAccess().getMethodMethodCallParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMethodCallAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__TypePAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getTypePTypeParameterParserRuleCall_1_0()); }
	ruletypeParameter{ after(grammarAccess.getMethodCallAccess().getTypePTypeParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMethod_defAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__ArgsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getArgsArgumentParserRuleCall_2_0_0()); }
	ruleargument{ after(grammarAccess.getMethod_defAccess().getArgsArgumentParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__ArgsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getArgsArgumentParserRuleCall_2_1_1_0()); }
	ruleargument{ after(grammarAccess.getMethod_defAccess().getArgsArgumentParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method_def__BodyAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethod_defAccess().getBodyBodyParserRuleCall_5_0()); }
	rulebody{ after(grammarAccess.getMethod_defAccess().getBodyBodyParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StmtsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getStmtsStmtParserRuleCall_1_0()); }
	rulestmt{ after(grammarAccess.getBodyAccess().getStmtsStmtParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__TypePAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypePTypeParameterParserRuleCall_1_0()); }
	ruletypeParameter{ after(grammarAccess.getArgumentAccess().getTypePTypeParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable_name__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariable_nameAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariable_nameAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__String_val__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getString_valAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getString_valAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Int_val__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInt_valAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getInt_valAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


